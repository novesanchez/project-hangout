<?php

/**
 * RequesterTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RequesterTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object RequesterTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Requester');
    }
    
    public function updateHangoutRequest($requestStatusId, $confirmationKey)
    {
        try{
           
            $queryRequester = self::getInstance()->findOneBy("confirmation_key", $confirmationKey);
                        
            if($queryRequester['request_status_id'] == 4){
                return 'Hangout request is already accepted';
            }else if($queryRequester['request_status_id'] == 3){
                return 'Hangout request is already ignored';
            }
            
            $updateRequester = Doctrine::getTable('Requester')->findOneBy("confirmation_key", $confirmationKey);
            $updateRequester->request_status_id = $requestStatusId;
            $response = $updateRequester->save();
            
            $postingRecord = Doctrine::getTable('Postings')->findOneBy("id", $updateRequester->getPostingId());
            
            $ratersGroup = new RatersGroup();
            $ratersGroup->setRatee($updateRequester->getMemberId());
            $ratersGroup->setRater($postingRecord->getMemberId());
            $ratersGroup->setPostingId($postingRecord->getId());
            $ratersGroup->save();
            
            $ratersGroup = new RatersGroup();
            $ratersGroup->setRatee($postingRecord->getMemberId());
            $ratersGroup->setRater($updateRequester->getMemberId());
            $ratersGroup->setPostingId($postingRecord->getId());
            $ratersGroup->save();
            
            $queryRequester = self::getInstance()->findOneBy("confirmation_key", $confirmationKey);
            if($queryRequester['request_status_id'] == $requestStatusId){
                return true;
            } else {
                return false;
            }
            
        }catch(Exception $e){
            die($e->getMessage());
        }
    }
    
    public static function queryRequester()
    {
        return self::getInstance()->createQuery('r');
    }
}