<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Member', 'doctrine');

/**
 * BaseMember
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $nick_name
 * @property string $country
 * @property string $state
 * @property string $city
 * @property string $email
 * @property integer $age
 * @property integer $zip_code
 * @property string $gender
 * @property date $birthday
 * @property integer $profile_picture_id
 * @property integer $is_published
 * @property integer $status
 * @property string $profile_id
 * @property string $confirmation_code
 * @property timestamp $confirmed_date
 * @property integer $num_confirm
 * @property timestamp $created_at
 * @property Doctrine_Collection $Photo
 * @property Doctrine_Collection $Friendship
 * @property Doctrine_Collection $Hangout
 * @property Doctrine_Collection $HotList
 * @property Doctrine_Collection $MemberProfile
 * @property Doctrine_Collection $Postings
 * @property Doctrine_Collection $RatersGroup
 * @property Doctrine_Collection $RatersGroup_2
 * @property Doctrine_Collection $Requester
 * @property Doctrine_Collection $SurveyComments
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method string              getUsername()           Returns the current record's "username" value
 * @method string              getPassword()           Returns the current record's "password" value
 * @method string              getNickName()           Returns the current record's "nick_name" value
 * @method string              getCountry()            Returns the current record's "country" value
 * @method string              getState()              Returns the current record's "state" value
 * @method string              getCity()               Returns the current record's "city" value
 * @method string              getEmail()              Returns the current record's "email" value
 * @method integer             getAge()                Returns the current record's "age" value
 * @method integer             getZipCode()            Returns the current record's "zip_code" value
 * @method string              getGender()             Returns the current record's "gender" value
 * @method date                getBirthday()           Returns the current record's "birthday" value
 * @method integer             getProfilePictureId()   Returns the current record's "profile_picture_id" value
 * @method integer             getIsPublished()        Returns the current record's "is_published" value
 * @method integer             getStatus()             Returns the current record's "status" value
 * @method string              getProfileId()          Returns the current record's "profile_id" value
 * @method string              getConfirmationCode()   Returns the current record's "confirmation_code" value
 * @method timestamp           getConfirmedDate()      Returns the current record's "confirmed_date" value
 * @method integer             getNumConfirm()         Returns the current record's "num_confirm" value
 * @method timestamp           getCreatedAt()          Returns the current record's "created_at" value
 * @method Doctrine_Collection getPhoto()              Returns the current record's "Photo" collection
 * @method Doctrine_Collection getFriendship()         Returns the current record's "Friendship" collection
 * @method Doctrine_Collection getHangout()            Returns the current record's "Hangout" collection
 * @method Doctrine_Collection getHotList()            Returns the current record's "HotList" collection
 * @method Doctrine_Collection getMemberProfile()      Returns the current record's "MemberProfile" collection
 * @method Doctrine_Collection getPostings()           Returns the current record's "Postings" collection
 * @method Doctrine_Collection getRatersGroup()        Returns the current record's "RatersGroup" collection
 * @method Doctrine_Collection getRatersGroup2()       Returns the current record's "RatersGroup_2" collection
 * @method Doctrine_Collection getRequester()          Returns the current record's "Requester" collection
 * @method Doctrine_Collection getSurveyComments()     Returns the current record's "SurveyComments" collection
 * @method Member              setId()                 Sets the current record's "id" value
 * @method Member              setUsername()           Sets the current record's "username" value
 * @method Member              setPassword()           Sets the current record's "password" value
 * @method Member              setNickName()           Sets the current record's "nick_name" value
 * @method Member              setCountry()            Sets the current record's "country" value
 * @method Member              setState()              Sets the current record's "state" value
 * @method Member              setCity()               Sets the current record's "city" value
 * @method Member              setEmail()              Sets the current record's "email" value
 * @method Member              setAge()                Sets the current record's "age" value
 * @method Member              setZipCode()            Sets the current record's "zip_code" value
 * @method Member              setGender()             Sets the current record's "gender" value
 * @method Member              setBirthday()           Sets the current record's "birthday" value
 * @method Member              setProfilePictureId()   Sets the current record's "profile_picture_id" value
 * @method Member              setIsPublished()        Sets the current record's "is_published" value
 * @method Member              setStatus()             Sets the current record's "status" value
 * @method Member              setProfileId()          Sets the current record's "profile_id" value
 * @method Member              setConfirmationCode()   Sets the current record's "confirmation_code" value
 * @method Member              setConfirmedDate()      Sets the current record's "confirmed_date" value
 * @method Member              setNumConfirm()         Sets the current record's "num_confirm" value
 * @method Member              setCreatedAt()          Sets the current record's "created_at" value
 * @method Member              setPhoto()              Sets the current record's "Photo" collection
 * @method Member              setFriendship()         Sets the current record's "Friendship" collection
 * @method Member              setHangout()            Sets the current record's "Hangout" collection
 * @method Member              setHotList()            Sets the current record's "HotList" collection
 * @method Member              setMemberProfile()      Sets the current record's "MemberProfile" collection
 * @method Member              setPostings()           Sets the current record's "Postings" collection
 * @method Member              setRatersGroup()        Sets the current record's "RatersGroup" collection
 * @method Member              setRatersGroup2()       Sets the current record's "RatersGroup_2" collection
 * @method Member              setRequester()          Sets the current record's "Requester" collection
 * @method Member              setSurveyComments()     Sets the current record's "SurveyComments" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMember extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('member');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('password', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('nick_name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('country', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('state', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('city', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('age', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('zip_code', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('gender', 'string', 1, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('birthday', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('profile_picture_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('is_published', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('profile_id', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('confirmation_code', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('confirmed_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('num_confirm', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Photo', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('Friendship', array(
             'local' => 'id',
             'foreign' => 'friend_id'));

        $this->hasMany('Hangout', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('HotList', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('MemberProfile', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('Postings', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('RatersGroup', array(
             'local' => 'id',
             'foreign' => 'rater'));

        $this->hasMany('RatersGroup as RatersGroup_2', array(
             'local' => 'id',
             'foreign' => 'ratee'));

        $this->hasMany('Requester', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('SurveyComments', array(
             'local' => 'id',
             'foreign' => 'member_id'));
    }
}